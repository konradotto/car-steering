# Copyright (C) 2020  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:19.03.3

# Details about how to connect to the Docker service to run this build.
variables:
  #DOCKER_HOST: tcp://172.17.0.1:2375
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  # DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64
  BUILDX_PLATFORM: linux/amd64,linux/arm64,linux/arm/v7
  BUILDX_BUILDER: cyberGroup13


services:
  - name: docker:19.03.3-dind
    command: ["--experimental"]

stages:
  - build
  - deploy
  - test
 

# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  stage: build
  only: ['branches']
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  
  script:
    - docker build -t build -f Dockerfile .
  #  - id=$(docker create build)
  #  - docker cp "${id}:/opt/coverage/" $CI_PROJECT_DIR/coverage
  #  - echo "$(cat $CI_PROJECT_DIR/coverage/coverage.txt)"
  #  - docker rm -v "${id}" 
  #artifacts: 
  #    paths:
  #    - $CI_PROJECT_DIR/coverage
  #    expire_in: 30 days
  #    reports:
  #      cobertura: $CI_PROJECT_DIR/coverage/cobertura.xml

performance:
  tags:
    - cool
  stage: build
  before_script:
    - docker build -t sele -f sele/Dockerfile sele/
  script:
    - ./run.sh || true
    #- "curl 'https://git.chalmers.se/courses/dit638/students/group_13/-/jobs/38172/artifacts/download' -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:76.0) Gecko/20100101 Firefox/76.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Referer: https://git.chalmers.se/courses/dit638/students/group_13/-/jobs/38172' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Cookie: sidebar_collapsed=false; diff_view=inline; frequently_used_emojis=thumbsup; _gitlab_session=7978d66a3ba2007f99f8aac66054fe72; event_filter=all' -H 'Upgrade-Insecure-Requests: 1' -H 'TE: Trailers'"
    #- 'curl --location --output artifacts.zip --header "Authorization: Bearer 7978d66a3ba2007f99f8aac66054fe72" https://git.chalmers.se/api/v4/projects/849/jobs/artifacts/feature/28-local-runner/download?job=performance'
    # curl --location --output artifacts.zip "$CI_PROJECT_URL/$CI_PROJECT_ID/jobs/artifacts/feature/28-local-runner/download?job=performance&job_token=$CI_JOB_TOKEN"
    - 'curl --location --header "PRIVATE-TOKEN:tfnS3wsBLJJPUNSpS2TD" "https://git.chalmers.se/api/v4/projects/849/jobs/artifacts/feature/28-local-runner/download?job=performance"'
    #- wget "https://git.chalmers.se/courses/dit638/students/group_13/-/jobs/38131/artifacts/raw/csv/reports.csv" #"https://git.chalmers.se/courses/dit638/students/group_13/jobs/artifacts/master/download?job=performance&job_token=$CI_JOB_TOKEN"
   # - cat reports.csv
    #- curl --location --output artifacts.zip https://git.chalmers.se/courses/dit638/students/group_13/-/jobs/38162/artifacts/download
    - ls -a
    - cat artifacts.zip
    - unzip artifacts.zip
    - ls -a
    - cat csv/reports.csv
    - python3 analyser/src/mergeCSV.py csv/reports.csv reports.csv
    - python3 analyser/src/analyser.py < mergedReports.csv
    - jobs
  artifacts:
    paths: 
      - csv/reports.csv
      - mergedReports.csv
    expire_in: 1 week
    when: always

# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^\Av(\d)\.(\d)\.(\d)\z/  
  variables:
    IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  before_script:
    - mkdir -p $HOME/.docker/cli-plugins/
    - wget -O $HOME/.docker/cli-plugins/docker-buildx $BUILDX_URL
    - chmod a+x $HOME/.docker/cli-plugins/docker-buildx
    - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use --driver docker-container --name ${BUILDX_BUILDER} --platform=${BUILDX_PLATFORM}
    - docker buildx inspect --bootstrap ${BUILDX_BUILDER}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "${IMAGE}"
    - docker buildx build --platform=${BUILDX_PLATFORM} -t ${IMAGE} --push .
  when: on_success
    