# Copyright (C) 2020  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:19.03.3

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://172.17.0.1:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64
  BUILDX_PLATFORM: linux/amd64,linux/arm64,linux/arm/v7
  IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  BUILDX_BUILDER: cyberGroup13

services:
  - name: docker:19.03.3-dind
    command: ["--experimental"]

stages:
  - build
  - deploy

# Display information before we start the build.
before_script:
  - mkdir -p $HOME/.docker/cli-plugins/
  - wget -O $HOME/.docker/cli-plugins/docker-buildx $BUILDX_URL
  - chmod a+x $HOME/.docker/cli-plugins/docker-buildx
  - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  - docker buildx create --use --driver docker-container --name ${BUILDX_BUILDER} --platform=${BUILDX_PLATFORM}
  - docker buildx inspect --bootstrap ${BUILDX_BUILDER}
  - docker buildx ls
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

 

# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  stage: build
  only: ['branches']
  script:
    - docker buildx build --platform=${BUILDX_PLATFORM} -t ${IMAGE} --push "."
    - docker run --rm ${IMAGE}:${CI_COMMIT_SHA} ${TEST_CMD}
    - docker tag ${IMAGE}:${CI_COMMIT_SHA} ${IMAGE}:latest
    - docker push ${IMAGE}:latest

  


# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^\Av(\d)\.(\d)\.(\d)\z/
      
  variables:
    IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  script:
    - docker build -t $IMAGE -f Dockerfile .
    - docker push $IMAGE
  when: on_success
    